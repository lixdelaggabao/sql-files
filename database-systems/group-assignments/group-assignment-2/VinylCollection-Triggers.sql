CREATE OR REPLACE TRIGGER TRIGGER_INSERT_SONG_VIEW
INSTEAD OF INSERT ON SONG_VIEW
FOR EACH ROW
DECLARE
    Song_ID SONG.ID%TYPE;
    Genre_ID GENRE.ID%TYPE;
    SongTitle_ID SONGTITLE.ID%TYPE;
    CurrentDate DATE;
BEGIN
    CurrentDate := SYSDATE;

    INSERT INTO SONG (DURATION)
        VALUES (:NEW.DURATION)
        RETURNING ID INTO Song_ID;

	SELECT ID INTO Genre_ID
		FROM GENRE
		WHERE NAME = :NEW.GENRE_NAME;
        
    INSERT INTO SONGGENRE
        VALUES (Song_ID, Genre_ID);
    
    INSERT INTO SONGTITLE (TITLE)
        VALUES (:NEW.TITLE)
        RETURNING ID INTO SongTitle_ID;
    
    INSERT INTO SONGSONGTITLE
	VALUES (Song_ID, SongTitle_ID, CurrentDate, NULL);
END;
/

CREATE OR REPLACE TRIGGER TRIGGER_UPDATE_SONG_VIEW
INSTEAD OF UPDATE ON SONG_VIEW
FOR EACH ROW
DECLARE
    Song_ID SONG.ID%TYPE;
    Genre_ID GENRE.ID%TYPE;
    SongTitle_ID SONGTITLE.ID%TYPE;
    CurrentDate DATE;
BEGIN
    CurrentDate := SYSDATE;
    Song_ID := :OLD.ID;
    
    IF :NEW.DURATION <> :OLD.DURATION THEN
        UPDATE SONG
            SET DURATION = :NEW.DURATION
            WHERE ID = Song_ID;
    END IF;

    IF :NEW.GENRE_NAME <> :OLD.GENRE_NAME THEN
		SELECT ID INTO Genre_ID
            FROM GENRE
            WHERE NAME = :NEW.GENRE_NAME;

		UPDATE SONGGENRE
            SET GENREID = Genre_ID
            WHERE SONGID = Song_ID;
    END IF;

    IF :NEW.TITLE <> :OLD.TITLE THEN
        INSERT INTO SONGTITLE (TITLE)
            VALUES (:NEW.TITLE)
            RETURNING ID INTO SongTitle_ID;
         
        UPDATE SONGSONGTITLE
            SET ENDTIME = CurrentDate
            WHERE SONGID = Song_ID
                AND ENDTIME IS NULL;
      
        INSERT INTO SONGSONGTITLE
            VALUES (Song_ID, SongTitle_ID, CurrentDate, NULL);
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRIGGER_INSERT_VINYL_VIEW
INSTEAD OF INSERT ON VINYL_VIEW
FOR EACH ROW
DECLARE
    Vinyl_ID VINYL.ID%TYPE;
    Shelf_ID SHELF.ID%TYPE;
    Condition_ID CONDITION.ID%TYPE;
    CurrentDate DATE;
BEGIN
    CurrentDate := SYSDATE;

	INSERT INTO VINYL (TITLE, RELEASEDATE, LABEL, PRODUCER, CATALOGNUMBER)
        VALUES (:NEW.TITLE, :NEW.RELEASEDATE, :NEW.LABEL, :NEW.PRODUCER, :NEW.CATALOGNUMBER)
        RETURNING ID INTO Vinyl_ID;
        
	SELECT ID INTO Shelf_ID
		FROM SHELF
		WHERE NAME = :NEW.SHELF_NAME;

    INSERT INTO VINYLSHELF
        VALUES (Vinyl_ID, Shelf_ID, CurrentDate, NULL);

	SELECT ID INTO Condition_ID
		FROM CONDITION
		WHERE STATE = :NEW.STATE;

    INSERT INTO VINYLCONDITION
        VALUES (Vinyl_ID, Condition_ID, CurrentDate, NULL);
END;
/

CREATE OR REPLACE TRIGGER TRIGGER_UPDATE_VINYL_VIEW
INSTEAD OF UPDATE ON VINYL_VIEW
FOR EACH ROW
DECLARE
    Vinyl_ID VINYL.ID%TYPE;
    Shelf_ID SHELF.ID%TYPE;
    Condition_ID CONDITION.ID%TYPE;
    CurrentDate DATE;
BEGIN
    CurrentDate := SYSDATE;
	Vinyl_ID := :OLD.ID;

	IF :NEW.TITLE <> :OLD.TITLE THEN
		UPDATE VINYL
			SET TITLE = :NEW.TITLE
			WHERE ID = Vinyl_ID;
	END IF;

	IF :NEW.RELEASEDATE <> :OLD.RELEASEDATE THEN
		UPDATE VINYL
			SET RELEASEDATE = :NEW.RELEASEDATE
			WHERE ID = Vinyl_ID;
	END IF;

	IF :NEW.LABEL <> :OLD.LABEL THEN
		UPDATE VINYL
			SET LABEL = :NEW.LABEL
			WHERE ID = Vinyl_ID;
	END IF;

	IF :NEW.PRODUCER <> :OLD.PRODUCER THEN
		UPDATE VINYL
			SET PRODUCER = :NEW.PRODUCER
			WHERE ID = Vinyl_ID;
	END IF;

	IF :NEW.CATALOGNUMBER <> :OLD.CATALOGNUMBER THEN
		UPDATE VINYL
			SET CATALOGNUMBER = :NEW.CATALOGNUMBER
			WHERE ID = Vinyl_ID;
	END IF;

	IF :NEW.SHELF_NAME <> :OLD.SHELF_NAME THEN
		SELECT ID
			INTO Shelf_ID
			FROM SHELF
			WHERE NAME = :NEW.SHELF_NAME;

		UPDATE VINYLSHELF
			SET ENDTIME = CurrentDate
			WHERE VINYLID = Vinyl_ID
				AND ENDTIME IS NULL;

		INSERT INTO VINYLSHELF
			VALUES (Vinyl_ID, Shelf_ID, CurrentDate, NULL);
	END IF;

	IF :NEW.STATE <> :OLD.STATE THEN
		SELECT ID
			INTO Condition_ID
			FROM CONDITION
			WHERE STATE = :NEW.STATE;

		UPDATE VINYLCONDITION
			SET ENDTIME = CurrentDate
			WHERE VINYLID = Vinyl_ID
				AND ENDTIME IS NULL;

		INSERT INTO VINYLCONDITION
			VALUES (Vinyl_ID, Condition_ID, CurrentDate, NULL);
	END IF;
END;
/

CREATE OR REPLACE TRIGGER TRIGGER_INSERT_MUSICIAN_VIEW
INSTEAD OF INSERT ON MUSICIAN_VIEW
FOR EACH ROW
DECLARE
    Musician_ID MUSICIAN.ID%TYPE;
    MusicianName_ID MUSICIANNAME.ID%TYPE;
    Country_ID COUNTRY.ID%TYPE;
	Instrumentalist_ID INSTRUMENTALIST.ID%TYPE;
	Singer_ID SINGER.ID%TYPE;
	Band_ID BAND.ID%TYPE;
    CurrentDate DATE;
BEGIN
    CurrentDate := SYSDATE;

	INSERT INTO MUSICIAN (ID)
		Values (DEFAULT)
		RETURNING ID INTO Musician_ID;

	SELECT ID
		INTO Country_ID
		FROM COUNTRY
		WHERE NAME = :NEW.COUNTRY_NAME;

	INSERT INTO MUSICIANCOUNTRY
        VALUES (Musician_ID, Country_ID, CurrentDate, NULL);

	INSERT INTO MUSICIANNAME (NAME)
        VALUES (:NEW.MUSICIAN_NAME)
        RETURNING ID INTO MusicianName_ID;
    
    INSERT INTO MUSICIANMUSICIANNAME
		VALUES (Musician_ID, MusicianName_ID, CurrentDate, NULL);

	IF :NEW.INSTRUMENT IS NOT NULL THEN
		INSERT INTO INSTRUMENTALIST (INSTRUMENT)
			VALUES (:NEW.INSTRUMENT)
			RETURNING ID INTO Instrumentalist_ID;
	END IF;
	
	IF :NEW.VOCALCLASSIFICATION IS NOT NULL THEN
		INSERT INTO SINGER (VOCALCLASSIFICATION)
			VALUES (:NEW.VOCALCLASSIFICATION)
			RETURNING ID INTO Singer_ID;
	END IF;

	IF :NEW.BAND_FORMATIONDATE IS NOT NULL THEN
		INSERT INTO BAND (FORMATIONDATE, DISBANDEDDATE)
			VALUES (:NEW.BAND_FORMATIONDATE, :NEW.BAND_DISBANDEDDATE)
			RETURNING ID INTO Band_ID;
	END IF;

	INSERT INTO MUSICIANROLE (INSTRUMENTALISTID, SINGERID, BANDID, MUSICIANID, STARTTIME, ENDTIME)
		VALUES (Instrumentalist_ID, Singer_ID, Band_ID, Musician_ID, CurrentDate, NULL);
END;
/

CREATE OR REPLACE TRIGGER TRIGGER_UPDATE_MUSICIAN_VIEW
INSTEAD OF UPDATE ON MUSICIAN_VIEW
FOR EACH ROW
DECLARE
    Musician_ID MUSICIAN.ID%TYPE;
    MusicianName_ID MUSICIANNAME.ID%TYPE;
    Country_ID COUNTRY.ID%TYPE;
	Instrumentalist_ID INSTRUMENTALIST.ID%TYPE;
	Singer_ID SINGER.ID%TYPE;
	Band_ID BAND.ID%TYPE;
    CurrentDate DATE;
BEGIN
    CurrentDate := SYSDATE;
	Musician_ID := :OLD.ID;

	IF :NEW.MUSICIAN_NAME <> :OLD.MUSICIAN_NAME THEN
        INSERT INTO MUSICIANNAME (NAME)
            VALUES (:NEW.MUSICIAN_NAME)
            RETURNING ID INTO MusicianName_ID;
         
        UPDATE MUSICIANMUSICIANNAME
            SET ENDTIME = CurrentDate
            WHERE MUSICIANID = Musician_ID
                AND ENDTIME IS NULL;
      
        INSERT INTO MUSICIANMUSICIANNAME
            VALUES (Musician_ID, MusicianName_ID, CurrentDate, NULL);
    END IF;

	IF :NEW.COUNTRY_NAME <> :OLD.COUNTRY_NAME THEN
		SELECT ID
			INTO Country_ID
            FROM Country
            WHERE NAME = :NEW.COUNTRY_NAME;

		UPDATE MUSICIANCOUNTRY
            SET ENDTIME = CurrentDate
            WHERE MUSICIANID = Musician_ID
				AND ENDTIME IS NULL;

		INSERT INTO MUSICIANCOUNTRY
			VALUES (Musician_ID, Country_ID, CurrentDate, NULL);
    END IF;

	IF (:NEW.INSTRUMENT <> :OLD.INSTRUMENT) OR (:NEW.INSTRUMENT IS NOT NULL AND :OLD.INSTRUMENT IS NULL) THEN
		INSERT INTO INSTRUMENTALIST (INSTRUMENT)
			VALUES (:NEW.INSTRUMENT)
			RETURNING ID INTO Instrumentalist_ID;

		UPDATE MUSICIANROLE
			SET ENDTIME = CurrentDate
			WHERE MUSICIANID = Musician_ID
				AND ENDTIME IS NULL;

		INSERT INTO MUSICIANROLE (INSTRUMENTALISTID, MUSICIANID, STARTTIME, ENDTIME)
			VALUES (Instrumentalist_ID, Musician_ID, CurrentDate, NULL);	
	ELSIF (:NEW.VOCALCLASSIFICATION <> :OLD.VOCALCLASSIFICATION) OR (:NEW.VOCALCLASSIFICATION IS NOT NULL AND :OLD.VOCALCLASSIFICATION IS NULL) THEN
		INSERT INTO SINGER (VOCALCLASSIFICATION)
			VALUES (:NEW.VOCALCLASSIFICATION)
			RETURNING ID INTO Singer_ID;

		UPDATE MUSICIANROLE
			SET ENDTIME = CurrentDate
			WHERE MUSICIANID = Musician_ID
				AND ENDTIME IS NULL;

		INSERT INTO MUSICIANROLE (SINGERID, MUSICIANID, STARTTIME, ENDTIME)
			VALUES (Singer_ID, Musician_ID, CurrentDate, NULL);
	ELSIF (:NEW.BAND_FORMATIONDATE <> :OLD.BAND_FORMATIONDATE) OR (:NEW.BAND_FORMATIONDATE IS NOT NULL AND :OLD.BAND_FORMATIONDATE IS NULL) THEN
		INSERT INTO BAND (FORMATIONDATE)
			VALUES (:NEW.BAND_FORMATIONDATE)
			RETURNING ID INTO Band_ID;

		UPDATE MUSICIANROLE
			SET ENDTIME = CurrentDate
			WHERE MUSICIANID = Musician_ID
				AND ENDTIME IS NULL;

		INSERT INTO MUSICIANROLE (BANDID, MUSICIANID, STARTTIME, ENDTIME)
			VALUES (Band_ID, Musician_ID, CurrentDate, NULL);
    END IF;

	IF (:NEW.BAND_DISBANDEDDATE <> :OLD.BAND_DISBANDEDDATE) OR (:NEW.BAND_DISBANDEDDATE IS NOT NULL AND :OLD.BAND_DISBANDEDDATE IS NULL) OR (:NEW.BAND_DISBANDEDDATE IS NULL AND :OLD.BAND_DISBANDEDDATE IS NOT NULL) THEN
		SELECT BANDID
			INTO Band_ID
            FROM MUSICIANROLE
            WHERE MUSICIANID = Musician_ID
				AND ENDTIME IS NULL;

		UPDATE BAND
			SET DISBANDEDDATE = :NEW.BAND_DISBANDEDDATE
			WHERE ID = Band_ID;
	END IF;
END;
/